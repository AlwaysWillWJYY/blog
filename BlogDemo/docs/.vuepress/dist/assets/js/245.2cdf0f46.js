(window.webpackJsonp=window.webpackJsonp||[]).push([[245],{708:function(e,t,a){"use strict";a.r(t);var l=a(1),o=Object(l.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"vuldeelocator-a-deep-learning-based-fine-grained-vulnerability-detector-tdsc-a-2021-。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuldeelocator-a-deep-learning-based-fine-grained-vulnerability-detector-tdsc-a-2021-。"}},[e._v("#")]),e._v(" VulDeeLocator: A Deep Learning-based Fine-grained Vulnerability Detector，TDSC(A) 2021 。")]),e._v(" "),t("p",[e._v("本文提出一个针对C语言的新的漏洞检测模型"),t("code",[e._v("VulDeeLocator")]),e._v("，将同一工程下的多个文件通过define-use的关系连接起来，并用中间代码表示替换源代码表示。将"),t("code",[e._v("BRNN")]),e._v("模型扩展为"),t("code",[e._v("BRNN-vdl")]),e._v("模型，不仅能够检测漏洞，还能够将漏洞出现的位置限制在几行之内。本文提出了一个新的数据集，每个样例都由"),t("code",[e._v("LLVM")]),e._v("的中间代码和源代码一同构成，在合成数据集和真实数据集上都验证了"),t("code",[e._v("VulDeeLocator")]),e._v("的有效性")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("跨语言模型，单双模态进行漏洞检测")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("GNN")]),e._v("表示")])]),e._v(" "),t("li",[t("p",[e._v("输出不仅是"),t("code",[e._v("mlp")]),e._v("，也可以定位到行")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);